grammar Schwartzman

dom_node            <- (open_html_tag expr_node* close_html_tag) %validate <DOMNode> / contained_html_tag <DOMNode> / commented_html <CommentedDOMNode>
open_html_tag       <- "<" whitespace? tag_name whitespace? attrs:dom_attr* whitespace? ">" whitespace?
contained_html_tag  <- "<" whitespace? tag_name whitespace? attrs:dom_attr* whitespace? "/>" whitespace?
close_html_tag      <- "</" tag_name ">" whitespace?
tag_name            <- [a-z]+
dom_attr            <- name:dashed_var_name "=" value:(dq_string_literal / sq_string_literal / var_name / mustache_node)

commented_html <- "<!--" (!"-->" .)* "-->" whitespace?

expr_node     <- dom_node / mustache_node / text_node
mustache_node <- (variable_node whitespace?) <MustacheNode> / (section_node whitespace?) <MustacheNode> # TODO: NonFalseValueNode | InvertedSectionNode | CommentsNode | PartialNode | SetDelimiterNode | LambdaNode

variable_node           <- regular_variable_node / escaped_variable_node
regular_variable_node   <- "{{" whitespace? var_name whitespace? "}}"
escaped_variable_node   <- "{{&" whitespace? var_name whitespace? "}}" / "{{{" whitespace? var_name whitespace? "}}}"
section_node            <- open_section_node expr_node close_section_node %validate_mustache
open_section_node       <- "{{#" whitespace? var_name whitespace? "}}" whitespace?
close_section_node      <- "{{/" whitespace? var_name whitespace? "}}" whitespace?

text_node <- (!"{{" [^<>])+ <TextNode>

var_name          <- (&letter dot_alphanum*)
dashed_var_name   <- (&letter dash_alphanum*)
letter            <- [a-z]
dot_alphanum      <- "."? [a-z0-9]+
dash_alphanum     <- "-"? [a-z0-9]+

sq_string_literal <-  "'" ([^'\\{]+ / mustache_node)*  "'"  %removeQuotes # TODO: escaping
dq_string_literal <- "\"" ([^"\\{]+ / mustache_node)* "\""  %removeQuotes # TODO: escaping

whitespace        <- [ \s]+
